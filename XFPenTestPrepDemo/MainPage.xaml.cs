using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace XFPenTestPrepDemo
{
    // Learn more about making custom code visible in the Xamarin.Forms previewer
    // by visiting https://aka.ms/xamarinforms-previewer
    [DesignTimeVisible(false)]
    public partial class MainPage : ContentPage
    {
        MainPageViewModel _viewModel;

        public MainPage()
        {
            InitializeComponent();

            _viewModel = new MainPageViewModel();
            BindingContext = _viewModel;
        }

        private async void TestButton_Clicked(object sender, EventArgs e)
        {
            _viewModel.IsRunning = true;

            var selfSignedBadSsl = "https://self-signed.badssl.com/";
            var httpBadSsl = "http://http.badssl.com/";

            var resultSelfSignedTest = await App.HttpClient.GetAsync(selfSignedBadSsl);
            _viewModel.ResultHttpsSelfSigned = resultSelfSignedTest.IsSuccessStatusCode;

            var resultBadSslTest = await App.HttpClient.GetAsync(httpBadSsl);
            _viewModel.ResultHttpsSelfSigned = resultBadSslTest.IsSuccessStatusCode;

            _viewModel.IsRunning = false;
        }
    }

    public class MainPageViewModel : INotifyPropertyChanged
    {
        private bool resultHttpsSelfSigned;
        public bool ResultHttpsSelfSigned
        {
            get
            {
                return resultHttpsSelfSigned;
            }
            set
            {
                resultHttpsSelfSigned = value;
                NotifyPropertyChanged();
            }
        }

        private bool resultHttpTest;
        public bool ResultHttpTest
        {
            get
            {
                return resultHttpTest;
            }
            set
            {
                resultHttpTest = value;
                NotifyPropertyChanged();
            }
        }

        private bool isRunning;
        public bool IsRunning
        {
            get
            {
                return isRunning;
            }
            set
            {
                isRunning = value;
                NotifyPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
