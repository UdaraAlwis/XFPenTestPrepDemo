using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;
using XFPenTestPrepDemo.Services;

namespace XFPenTestPrepDemo
{
    // Learn more about making custom code visible in the Xamarin.Forms previewer
    // by visiting https://aka.ms/xamarinforms-previewer
    [DesignTimeVisible(false)]
    public partial class MainPage : ContentPage
    {
        private readonly MainPageViewModel _viewModel;

        public MainPage()
        {
            InitializeComponent();

            App.HttpClient = new HttpClient((HttpMessageHandler)App.HttpClientHandler)
            {

            };
            
            _viewModel = new MainPageViewModel();
            BindingContext = _viewModel;
        }

        protected override void OnAppearing()
        {
            base.OnAppearing();

            var deviceProxyService = DependencyService.Get<IDeviceProxyService>();
            var deviceProxySettings = deviceProxyService?.GetProxySettings();

            if (deviceProxySettings == null)
            {
                _viewModel.ProxySettingsText = "No Proxy Settings detected.";
                return;
            }

            _viewModel.ProxySettingsText = deviceProxySettings.Address.Authority;
        }

        private async void TestButton_Clicked(object sender, EventArgs e)
        {
            _viewModel.IsRunning = true;

            var selfSignedBadSsl = "https://self-signed.badssl.com/";
            var httpBadSsl = "http://http.badssl.com/";

            try
            {
                var resultSelfSignedTest = await App.HttpClient.GetAsync(selfSignedBadSsl);
                _viewModel.ResultHttpsSelfSigned = resultSelfSignedTest.IsSuccessStatusCode;
            }
            catch (Exception ex)
            {
                _viewModel.ResultHttpsSelfSigned = false;
            }

            try
            {
                var resultBadSslTest = await App.HttpClient.GetStringAsync(httpBadSsl);
                _viewModel.ResultHttpTest = true;
            }
            catch (Exception ex)
            {
                _viewModel.ResultHttpTest = false;
            }

            _viewModel.IsRunning = false;
        }
    }

    public class MainPageViewModel : INotifyPropertyChanged
    {
        private bool _resultHttpsSelfSigned;
        public bool ResultHttpsSelfSigned
        {
            get
            {
                return _resultHttpsSelfSigned;
            }
            set
            {
                _resultHttpsSelfSigned = value;
                NotifyPropertyChanged();
            }
        }

        private bool _resultHttpTest;
        public bool ResultHttpTest
        {
            get
            {
                return _resultHttpTest;
            }
            set
            {
                _resultHttpTest = value;
                NotifyPropertyChanged();
            }
        }

        private bool _isRunning;
        public bool IsRunning
        {
            get
            {
                return _isRunning;
            }
            set
            {
                _isRunning = value;
                NotifyPropertyChanged();
            }
        }

        private string _proxySettingsText;
        public string ProxySettingsText
        {
            get
            {
                return _proxySettingsText;
            }
            set
            {
                _proxySettingsText = value;
                NotifyPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
